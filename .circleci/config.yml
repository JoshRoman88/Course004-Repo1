version: 2.1
orbs: 
  aws-cli: circleci/aws-cli@3.1.1
  terraform: circleci/terraform@3.0.1
executors:
  docker-executor:
    docker:
      - image: cimg/python:3.9.6

jobs:
  init-plan-aws:
    working_directory: ~/project/terraform
    executor: docker-executor 
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Check aws version
          command: |
            aws --version
      - run:
          name: Install Terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
      - attach_workspace:
          at: .
      - run:
          name: terraform init plan fmt
          command: |
            cd terraform
            terraform init -upgrade -input=false
            terraform fmt .
            terraform plan -out tfplan
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply:
    working_directory: ~/project/terraform
    executor: docker-executor 
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: ~/project/terraform
      - run:
          name: Install Terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
      - run:
           name: terraform apply
           command: |
            ls -al
            cd terraform
            ls -al
            terraform apply -auto-approve tfplan
      - persist_to_workspace:
           root: .
           paths:
              - .
  destroy:
    working_directory: ~/project/terraform
    executor: docker-executor 
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: ~/project/terraform
      - run:
          name: Install Terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
      - run:
           name: terraform destroy
           command: |
            cd terraform
            terraform destroy -auto-approve
      - persist_to_workspace:
           root: .
           paths:
              - .
  clean-aws:
    working_directory: ~/project/terraform
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/terraform
      - aws-cli/setup:
          profile-name: default
      - run:
          command: aws --version
      - run:
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
          name: Install Terraform
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform init -upgrade -input=false
            terraform destroy --auto-approve
workflows:
    Deploy:
      jobs:
        - init-plan-aws:
            context: AWScreds
        - apply approval:
            type: approval
            requires:
              - init-plan-aws
        - apply:
            context: AWScreds
            requires:
              - apply approval
        # - destroy:
        #     context: AWScreds
        #     requires:
        #       - hold
    clean-aws:
      triggers:
       - schedule:
          cron: "0 0,4,8,12,16,20 * * *"
          filters:
            branches:
              only:
                - trunk
      jobs:
        - clean-aws:
            context:
              - AWScreds